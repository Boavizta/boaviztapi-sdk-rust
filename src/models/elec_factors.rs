/*
 * BOAVIZTAPI - DEMO
 *
 * <p>üéØ Retrieving the impacts of digital elements.</p> <p>This is a quick demo, to see full documentation <a href=\"https://doc.api.boavizta.org\">click here</a></p> <h2>Features</h2> <p>Bellow a list of all available features.</p> <h3>üëÑ Verbose</h3> <p>Verbose is an HTTP parameter. If set at true :</p> <ul> <li>Shows the impacts of each component</li> <li>Shows the value used for each attribute</li> </ul> <p><em>\"attribute\": {\"value\": \"value\", \"unit\": \"unit\", \"status\": \"Status\", \"source\": \"Source\", \"min\":\"min\", \"max\":\"max\", \"significant_figures\":\"significant_figures\"}</em></p> <h3>üî® Embedded</h3> <ul> <li>Embedded impacts are the impacts occurring during raw material extraction, manufacture, distribution and end of life</li> <li>When end of life is not taken into account, we specified it in the <code>warnings</code></li> </ul> <h3>üîå  Usage</h3> <p>Usage impacts are assessed by multiplying :</p> <ul> <li> <p>a <strong>duration</strong></p> </li> <li> <p>an <strong>impact factor</strong> </p> </li> <li> <p>an <strong>electrical consumption</strong> </p> </li> </ul> <h4>‚è≤ Duration</h4> <p>Usage impacts can be given as a router parameter, in hours.</p> <p>If no duration is given, <strong>the impact is assess for the all life duration of the asset</strong>.</p> <h4>‚úñÔ∏è Impact factors</h4> <ul> <li>Impact factors can be given : <em>\"usage\":{\"elec_factors\":{[criteria]: 0.38}}</em></li> <li> <p>Impact factors can be retrieved from : <em>\"usage\":{\"usage_location\": \"FRA\"}</em>. </p> </li> <li> <p>See the list of locations : <a href=\"/v1/utils/country_code\">/v1/utils/country_code</a>*</p> </li> </ul> <h4>‚ö° Electrical consumption</h4> <h5>‚è∫Ô∏è Given</h5> <ul> <li>Electrical consumption can be given for one hour (average) <em>\"usage\":{\"avg_power\": 1}</em>.</li> </ul> <h5>üìà Modeled</h5> <ul> <li>Electrical consumption can be retrieved from consumption profile using <em>usage:{time_workload: 50}</em>.</li> </ul> <h5>üìã Archetype</h5> <ul> <li>In some cases, default electrical consumption can be taken from the archetype</li> </ul> <h3>üîÉ Auto-complete &amp; üìã Archetype</h3> <p>The API will complete the missing attributes in a request with a completion function or with values taken from the <code>archetype</code> specified in the route parameter.</p> <h3>‚è¨ Allocation</h3> <ul> <li>Usage impacts are assessed on the duration given in route parameter</li> <li>Embedded impacts are allocated linearly on the duration given in parameter <code>embedded_impact = impact * (duration/life_duration)</code></li> </ul> <p>If no duration is given, the life_duration (<code>`hours_life_time</code>) of the asset is used.</p>
 *
 * The version of the OpenAPI document: 1.2.0
 * 
 * Generated by: https://openapi-generator.tech
 */

/// ElecFactors : BaseDTO is simple BaseModel object



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ElecFactors {
    #[serde(rename = "gwp", skip_serializing_if = "Option::is_none")]
    pub gwp: Option<f32>,
    #[serde(rename = "adp", skip_serializing_if = "Option::is_none")]
    pub adp: Option<f32>,
    #[serde(rename = "pe", skip_serializing_if = "Option::is_none")]
    pub pe: Option<f32>,
    #[serde(rename = "gwppb", skip_serializing_if = "Option::is_none")]
    pub gwppb: Option<f32>,
    #[serde(rename = "gwppf", skip_serializing_if = "Option::is_none")]
    pub gwppf: Option<f32>,
    #[serde(rename = "gwpplu", skip_serializing_if = "Option::is_none")]
    pub gwpplu: Option<f32>,
    #[serde(rename = "ir", skip_serializing_if = "Option::is_none")]
    pub ir: Option<f32>,
    #[serde(rename = "lu", skip_serializing_if = "Option::is_none")]
    pub lu: Option<f32>,
    #[serde(rename = "odp", skip_serializing_if = "Option::is_none")]
    pub odp: Option<f32>,
    #[serde(rename = "pm", skip_serializing_if = "Option::is_none")]
    pub pm: Option<f32>,
    #[serde(rename = "pocp", skip_serializing_if = "Option::is_none")]
    pub pocp: Option<f32>,
    #[serde(rename = "wu", skip_serializing_if = "Option::is_none")]
    pub wu: Option<f32>,
    #[serde(rename = "mips", skip_serializing_if = "Option::is_none")]
    pub mips: Option<f32>,
    #[serde(rename = "adpe", skip_serializing_if = "Option::is_none")]
    pub adpe: Option<f32>,
    #[serde(rename = "adpf", skip_serializing_if = "Option::is_none")]
    pub adpf: Option<f32>,
    #[serde(rename = "ap", skip_serializing_if = "Option::is_none")]
    pub ap: Option<f32>,
    #[serde(rename = "ctue", skip_serializing_if = "Option::is_none")]
    pub ctue: Option<f32>,
    #[serde(rename = "ctuh_c", skip_serializing_if = "Option::is_none")]
    pub ctuh_c: Option<f32>,
    #[serde(rename = "ctuh_nc", skip_serializing_if = "Option::is_none")]
    pub ctuh_nc: Option<f32>,
    #[serde(rename = "epf", skip_serializing_if = "Option::is_none")]
    pub epf: Option<f32>,
    #[serde(rename = "epm", skip_serializing_if = "Option::is_none")]
    pub epm: Option<f32>,
    #[serde(rename = "ept", skip_serializing_if = "Option::is_none")]
    pub ept: Option<f32>,
}

impl ElecFactors {
    /// BaseDTO is simple BaseModel object
    pub fn new() -> ElecFactors {
        ElecFactors {
            gwp: None,
            adp: None,
            pe: None,
            gwppb: None,
            gwppf: None,
            gwpplu: None,
            ir: None,
            lu: None,
            odp: None,
            pm: None,
            pocp: None,
            wu: None,
            mips: None,
            adpe: None,
            adpf: None,
            ap: None,
            ctue: None,
            ctuh_c: None,
            ctuh_nc: None,
            epf: None,
            epm: None,
            ept: None,
        }
    }
}


